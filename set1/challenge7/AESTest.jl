#! /usr/bin/env julia

using CUDA
using BenchmarkTools
using Cthulhu
using StaticArrays
using Setfield

@enum AESKeysize::Int begin
    SIZE_128 = 16
    SIZE_192 = 24
    SIZE_256 = 32
end

# Rijndael S-box
sbox =  UInt8[
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
        0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
        0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
        0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
        0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
        0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
        0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
        0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
        0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
        0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
        0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
        0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
        0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
        0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
        0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
        0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
        0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
        0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
        0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
        0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
        0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
        0x54, 0xbb, 0x16, 0x63]

# Rijndael Inverted S-box
rsbox = UInt8[
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
        0x9e, 0x81, 0xf3, 0xd7, 0xfb , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
        0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb , 0x54,
        0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
        0x42, 0xfa, 0xc3, 0x4e , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
        0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 , 0x72, 0xf8,
        0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
        0x65, 0xb6, 0x92 , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
        0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 , 0x90, 0xd8, 0xab,
        0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
        0x45, 0x06 , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
        0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b , 0x3a, 0x91, 0x11, 0x41,
        0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
        0x73 , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
        0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e , 0x47, 0xf1, 0x1a, 0x71, 0x1d,
        0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
        0xfe, 0x78, 0xcd, 0x5a, 0xf4 , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
        0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f , 0x60,
        0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
        0x93, 0xc9, 0x9c, 0xef , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
        0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 , 0x17, 0x2b,
        0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
        0x21, 0x0c, 0x7d, 0x52]


# Rijndael Rcon
rcon =  UInt8[
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
        0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
        0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
        0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
        0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
        0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
        0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
        0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
        0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
        0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
        0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
        0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
        0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
        0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
        0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
        0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
        0xe8, 0xcb, 0x8d ]


function core!(t1, t2, t3, t4, iteration, sbox, rcon)
    t2, t3, t4, t1 = t1, t2, t3, t4

    t1 = sbox[t1 + 1]
    t2 = sbox[t2 + 1]
    t3 = sbox[t3 + 1]
    t4 = sbox[t4 + 1]

    t1 ⊻= rcon[iteration + 1]

    return t1, t2, t3, t4
end

function expandKey!(expandedKey, key, keySize, expandedKeySize, sbox, rsbox, rcon)
    #println("ExpandKey in:  ", key)
    rconIteration = 1

    for i in 1:16
        @inbounds expandedKey[i] = key[i]
    end

    for currentSize in 15:4:(expandedKeySize-1)
        t1 = expandedKey[currentSize - 2]
        t2 = expandedKey[currentSize - 1]
        t3 = expandedKey[currentSize]
        t4 = expandedKey[currentSize + 1]

        if currentSize % keySize == 0
            t1, t2, t3, t4 = core(t1,t2,t3,t4, rconIteration, sbox, rcon)
            rconIteration += 1
        end

        if keySize == Int(SIZE_256) && currentSize % keySize == 16
            t1 = sbox[t1 + 1]
            t2 = sbox[t2 + 1]
            t3 = sbox[t3 + 1]
            t4 = sbox[t4 + 1]
        end

        expandedKey[currentSize+1] = expandedKey[currentSize - keySize + 1] ⊻ t1
        expandedKey[currentSize+2] = expandedKey[currentSize - keySize + 2] ⊻ t2
        expandedKey[currentSize+3] = expandedKey[currentSize - keySize + 3] ⊻ t3
        expandedKey[currentSize+4] = expandedKey[currentSize - keySize + 4] ⊻ t4
    end

    #println("ExpandKey out: ", expandedKey)
    return expandedKey
end

function aes_invMain(output, block, expandedKey, numRounds)
    #println("AES inverse in:  ", block)
    for i in 1:16
        output[i] = block[i] ⊻ expandedKey[i]
    end
    #println("AES inverse out: ", output)
end

function getExpandedKeySizeAndRounds(keySize::AESKeysize)
    # Number of rounds
    numRounds = 0

    if SIZE_128 == keySize
        numRounds = 10
    elseif SIZE_192 == keySize
        numRounds = 12
    else SIZE_256 == keySize
        numRounds = 14
    end

    # Expanded Key Size
    expandedKeySize = 16*(numRounds + 1)

    return numRounds, expandedKeySize
end

function transposeBlock(block)
    # Iterate over columns
    for col in 0:3
        # Iterate over rows
        for row in (col+ 1):3
            i1 = (col + 4*row) + 1
            i2 = (4*col + row) + 1
            @inbounds block[i1], block[i2] = block[i2], block[i1]
        end
    end
end


function decode(block_out, block_in, key, keySize::AESKeysize)
    numRounds, expandedKeySize = getExpandedKeySizeAndRounds(keySize)

    # Expand the key
    expandedKey = UInt8[0 for _ in 1:expandedKeySize]
    expandKey(expandedKey, key, Int(keySize), expandedKeySize, sbox, rsbox, rcon)

    # Column Major
    transposeBlock(block_in)

    # Decrypt the block
    aes_invMain(block_out, block_in, expandedKey, numRounds)

    # Unmap the key block to the output
    transposeBlock(block_out)
end

const NUM_BLOCKS = 128

# Self Test
function AESTest()
    randTextBlock = UInt8[i%256 for i in 1:16*NUM_BLOCKS]
    plainText = UInt8[0 for i in 1:16*NUM_BLOCKS]
    randKey = UInt8[i for i in 1:16]
    for i in 1:NUM_BLOCKS
        output = UInt8[0 for j in 1:16]
        block = UInt8[0 for j in 1:16]
        for j in 1:16
            block[j] = randTextBlock[16*(i-1) + j]
        end
        decode(output, block, randKey, SIZE_128)
        for j in 1:16
            plainText[16*(i - 1) + j] = output[j]
        end
    end
    #println(plainText)
    return plainText
end

function AESParrallelTest()
    randTextBlock = UInt8[i%256 for i in 1:16*NUM_BLOCKS]
    plainText = UInt8[0 for i in 1:16*NUM_BLOCKS]
    randKey = UInt8[i for i in 1:16]
    Threads.@threads for i in 1:NUM_BLOCKS
        output =  decode(randTextBlock, randKey, SIZE_128)
        for j in 1:16
            plainText[16*(i - 1) + j] = output[j]
        end
    end
    #println(plainText[1:32])
    return nothing
end

# Something like this, but more complicated
@inline function blockAdd(block_in, block_out, sbox, offset)
    for j in 1:16
        i_in = 16*(offset-1) + j
        i_out = 16*(offset-1) + j%16 + 1
        #@inbounds block_out[i_out] = sbox[((2*block_in[i_in])%256)%255 + 1]
        @inbounds block_out[i_out] = block_in[i_in]
    end
end

const NUM_THREADS = min(64, NUM_BLOCKS)
function AESKernel!(in, key, keySize::AESKeysize, out, sbox, rsbox, rcon)
    i = Int64((blockIdx().x - 1) * blockDim().x + threadIdx().x)

    if i > length(in)
        return nothing
    end

    # Allocate our blocks of memory
    block_in  = CuStaticSharedArray(UInt8, 16*64)
    block_out = CuStaticSharedArray(UInt8, 16*64)
    key_in    = CuStaticSharedArray(UInt8, 16)
    expandedKey = CuStaticSharedArray(UInt8, 16*(14+1))

    offset = threadIdx().x

    # Unpack our block
    for j in 1:16
        index = 16*(offset-1) + j
        @inbounds block_in[index] = in[i] >> (8*(j-1)) % 256
        @inbounds key_in[i]   = key >> (8*(j-1)) % 256
    end


    blockAdd(block_in, block_out, sbox, offset)

    #numRounds, expandedKeySize = getExpandedKeySizeAndRounds(keySize)

    # Expand the key
    #expandKey(expandedKey, key_in, Int(keySize), expandedKeySize, sbox, rsbox, rcon)

    # Column Major
    #transposeBlock(block_in)

    # Decrypt the block
    #aes_invMain(block_out, block_in, expandedKey, numRounds)

    # Unmap the key block to the output
    #transposeBlock(block_out)

    # Repack the blocks
    sum = 0
    for j in 1:16
       index = 16*(offset-1) + j
       @inbounds sum += UInt128(block_out[index]) << (8*(j-1))
    end
    out[i] = sum
    sync_threads()
    return nothing
end

function AESGPUTest()
    randTextBlock = UInt8[i%256 for i in 1:16*NUM_BLOCKS]
    randKey = UInt8[i for i in 1:16]
    key = reinterpret(UInt128, randKey)[1]

    global sbox = CuArray(sbox)
    global rsbox = CuArray(rsbox)
    global rcon = CuArray(rcon)

    i1 = reinterpret(UInt128, randTextBlock)
    #println("I1", i1)
    cu_i1 = CuArray(i1)

    arraySize = length(i1)
    cu_o1 = CuArray(UInt128[0 for i in 1:arraySize])

    @cuda threads=NUM_THREADS blocks=cld(NUM_BLOCKS,NUM_THREADS) AESKernel!(cu_i1, key, SIZE_128, cu_o1, sbox, rsbox, rcon)
    return reinterpret(UInt8, Array(cu_o1))
end

println("CPU")
#p1 = AESTest()
#AESParrallelTest()
println("GPU")
p2 = AESGPUTest()

for i in 1:length(p2)
    println(p2[i])
end

#for i in 1:length(p1)
#    if p1[i] != p2[i]
#        println("Mismatch[",i,"]:", p1[i]," ", p2[i])
#    end
#end

